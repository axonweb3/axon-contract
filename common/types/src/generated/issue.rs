// Generated by Molecule 0.7.3

use super::basic::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct IssueCellData(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for IssueCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for IssueCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for IssueCellData {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "current_supply", self.current_supply())?;
        write!(f, ", {}: {}", "max_suppley", self.max_suppley())?;
        write!(f, ", {}: {}", "sudt_type_script", self.sudt_type_script())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for IssueCellData {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0,
        ];
        IssueCellData::new_unchecked(v.into())
    }
}
impl IssueCellData {
    pub const TOTAL_SIZE: usize = 65;
    pub const FIELD_SIZES: [usize; 4] = [1, 16, 16, 32];
    pub const FIELD_COUNT: usize = 4;
    pub fn version(&self) -> Byte {
        Byte::new_unchecked(self.0.slice(0..1))
    }
    pub fn current_supply(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(1..17))
    }
    pub fn max_suppley(&self) -> Uint128 {
        Uint128::new_unchecked(self.0.slice(17..33))
    }
    pub fn sudt_type_script(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(33..65))
    }
    pub fn as_reader<'r>(&'r self) -> IssueCellDataReader<'r> {
        IssueCellDataReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for IssueCellData {
    type Builder = IssueCellDataBuilder;
    const NAME: &'static str = "IssueCellData";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        IssueCellData(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        IssueCellDataReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        IssueCellDataReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .version(self.version())
            .current_supply(self.current_supply())
            .max_suppley(self.max_suppley())
            .sudt_type_script(self.sudt_type_script())
    }
}
#[derive(Clone, Copy)]
pub struct IssueCellDataReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for IssueCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for IssueCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for IssueCellDataReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "version", self.version())?;
        write!(f, ", {}: {}", "current_supply", self.current_supply())?;
        write!(f, ", {}: {}", "max_suppley", self.max_suppley())?;
        write!(f, ", {}: {}", "sudt_type_script", self.sudt_type_script())?;
        write!(f, " }}")
    }
}
impl<'r> IssueCellDataReader<'r> {
    pub const TOTAL_SIZE: usize = 65;
    pub const FIELD_SIZES: [usize; 4] = [1, 16, 16, 32];
    pub const FIELD_COUNT: usize = 4;
    pub fn version(&self) -> ByteReader<'r> {
        ByteReader::new_unchecked(&self.as_slice()[0..1])
    }
    pub fn current_supply(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[1..17])
    }
    pub fn max_suppley(&self) -> Uint128Reader<'r> {
        Uint128Reader::new_unchecked(&self.as_slice()[17..33])
    }
    pub fn sudt_type_script(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[33..65])
    }
}
impl<'r> molecule::prelude::Reader<'r> for IssueCellDataReader<'r> {
    type Entity = IssueCellData;
    const NAME: &'static str = "IssueCellDataReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        IssueCellDataReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct IssueCellDataBuilder {
    pub(crate) version: Byte,
    pub(crate) current_supply: Uint128,
    pub(crate) max_suppley: Uint128,
    pub(crate) sudt_type_script: Byte32,
}
impl IssueCellDataBuilder {
    pub const TOTAL_SIZE: usize = 65;
    pub const FIELD_SIZES: [usize; 4] = [1, 16, 16, 32];
    pub const FIELD_COUNT: usize = 4;
    pub fn version(mut self, v: Byte) -> Self {
        self.version = v;
        self
    }
    pub fn current_supply(mut self, v: Uint128) -> Self {
        self.current_supply = v;
        self
    }
    pub fn max_suppley(mut self, v: Uint128) -> Self {
        self.max_suppley = v;
        self
    }
    pub fn sudt_type_script(mut self, v: Byte32) -> Self {
        self.sudt_type_script = v;
        self
    }
}
impl molecule::prelude::Builder for IssueCellDataBuilder {
    type Entity = IssueCellData;
    const NAME: &'static str = "IssueCellDataBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.version.as_slice())?;
        writer.write_all(self.current_supply.as_slice())?;
        writer.write_all(self.max_suppley.as_slice())?;
        writer.write_all(self.sudt_type_script.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        IssueCellData::new_unchecked(inner.into())
    }
}
