import basic;

// reward smt cell
table RewardSmtCellData {
    version:                  byte,
    claim_smt_root:           Byte32,
    metadata_type_id: Byte32,
}

table RewardArgs {
    metadata_type_id: Byte32,
}

table NotClaimInfo {
    epoch: Uint64, // the miner only claimed rewrad of [0, epoch]
    proof: Bytes,
}

table RewardDelegateInfo {
    delegator_addr:      Identity,
    amount:    Uint128,
}
vector RewardDelegateInfos <RewardDelegateInfo>; // total delegator infos of one staker

table RewardStakeInfo {
    validator: Identity,
    propose_count: Uint64, // this epoch, this validator's propose count
    staker_amount: Uint128,
    delegate_infos: RewardDelegateInfos, // this epoch, this validator's total delegate infos
    delegate_epoch_proof: Bytes, // smt root of delegate can be calculated
}
vector RewardStakeInfos <RewardStakeInfo>; // one delegator may delegate multiple staker
table EpochRewardStakeInfo { // this epoch, one miner's all releated staker delegator infos
    reward_stake_infos: RewardStakeInfos, // actually bottom smt leaves
    count_proof: Bytes, // bottom propose count smt proof
    count_root: Bytes, // smt root of bottom propose count smt, optimize
    count_epoch_proof: Bytes, // smt proof of top propose count smt
    amount_proof: Bytes, // bottom stake amount smt proof
    amount_root: Bytes, 
    amount_epoch_proof: Bytes,
}
vector EpochRewardStakeInfos <EpochRewardStakeInfo>; // 

table RewardWitness {
    miner: Identity, // the one who are claiming its rewards
    old_not_claim_info: NotClaimInfo, // prove the miner has claimed reward of [0, n]
    reward_infos: EpochRewardStakeInfos, // the validator's proof, assume epoch [n + 1, m]
    new_not_claim_info: NotClaimInfo, // prove the miner has claimed reward of [0, m]
}