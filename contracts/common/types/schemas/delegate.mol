import basic;

// delegate cell
struct DelegateLimit {
   lowest_amount: Byte16,            // little endian number，minimum amount to be delegator
   highest_amount: Byte16,           // little endian number，maxmum amount to be delegated, 0 means do not accept delegation
   delegator_limit: Byte16,          // little endian number，maximum delegator number,
                                     // this is decided by ckb block size，may be set in metadata cell to be shared 
}

struct DelegateInfo {
    l1_address: Identity,            // staker identity in L1
    l2_address: Identity,            // staker L2 address
    dividend_ratio: byte,            // only dividend_ratio% reward will go to delegators
}

table DelegateCellData {
    version: byte,
    delegate_limit: DelegateLimit,    // the staker's requirement of delegator
    delegate_info: DelegateInfo,      // every staker maps to one delegate cell
    checkpoint_type_id: Byte32,       // checkpoint type script hash
    xudt_type_id: Byte32,             // xUDT type script has
}

// delegate AT cell

table DelegatorInfo {
    staker: Identity,
    delegate_amount: Byte16,      // little endian number，delegated AT amount
    inauguration_epoch: Byte8,    // little endian number，inaugurated epoch
}

vector DelegatorInfos <DelegatorInfo>;
table DelegateAtCellData {
    amount: Byte16,                        // rule of sUDT
    version: byte,
    checkpoint_type_id: Byte32,            // checkpoint type script hash
    xudt_type_id: Byte32,                  // xUDT type script hash
    // delegator_infos not updated to SMT cell, one delegator can delegate to many stakers
    // every staker has one entry
    delegator_infos: DelegatorInfos,
}

// delegate SMT cell

table StakerSmtRoot {
    staker: Identity,
    root: Byte32,
}

vector StakerSmtRoots <StakerSmtRoot>;

table DelegateSmtCellData {
    smt_roots: StakerSmtRoots,  // smt root of all delegator infos
    version: byte,
    checkpoint_type_id: Byte32, // checkpoint type script hash
    delegate_type_id: Byte32,
    reward_type_id: Byte32,
    xudt_type_id: Byte32,       // xUDT type script hash
}