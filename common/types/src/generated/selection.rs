// Generated by Molecule 0.7.3

use super::basic::*;
use molecule::prelude::*;
#[derive(Clone)]
pub struct SelectionLockArgs(molecule::bytes::Bytes);
impl ::core::fmt::LowerHex for SelectionLockArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl ::core::fmt::Debug for SelectionLockArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl ::core::fmt::Display for SelectionLockArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "reward_smt_type_id", self.reward_smt_type_id())?;
        write!(f, ", {}: {}", "issue_lock_hash", self.issue_lock_hash())?;
        write!(f, " }}")
    }
}
impl ::core::default::Default for SelectionLockArgs {
    fn default() -> Self {
        let v: Vec<u8> = vec![
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0,
        ];
        SelectionLockArgs::new_unchecked(v.into())
    }
}
impl SelectionLockArgs {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZES: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn reward_smt_type_id(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(0..32))
    }
    pub fn issue_lock_hash(&self) -> Byte32 {
        Byte32::new_unchecked(self.0.slice(32..64))
    }
    pub fn as_reader<'r>(&'r self) -> SelectionLockArgsReader<'r> {
        SelectionLockArgsReader::new_unchecked(self.as_slice())
    }
}
impl molecule::prelude::Entity for SelectionLockArgs {
    type Builder = SelectionLockArgsBuilder;
    const NAME: &'static str = "SelectionLockArgs";
    fn new_unchecked(data: molecule::bytes::Bytes) -> Self {
        SelectionLockArgs(data)
    }
    fn as_bytes(&self) -> molecule::bytes::Bytes {
        self.0.clone()
    }
    fn as_slice(&self) -> &[u8] {
        &self.0[..]
    }
    fn from_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SelectionLockArgsReader::from_slice(slice).map(|reader| reader.to_entity())
    }
    fn from_compatible_slice(slice: &[u8]) -> molecule::error::VerificationResult<Self> {
        SelectionLockArgsReader::from_compatible_slice(slice).map(|reader| reader.to_entity())
    }
    fn new_builder() -> Self::Builder {
        ::core::default::Default::default()
    }
    fn as_builder(self) -> Self::Builder {
        Self::new_builder()
            .reward_smt_type_id(self.reward_smt_type_id())
            .issue_lock_hash(self.issue_lock_hash())
    }
}
#[derive(Clone, Copy)]
pub struct SelectionLockArgsReader<'r>(&'r [u8]);
impl<'r> ::core::fmt::LowerHex for SelectionLockArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        use molecule::hex_string;
        if f.alternate() {
            write!(f, "0x")?;
        }
        write!(f, "{}", hex_string(self.as_slice()))
    }
}
impl<'r> ::core::fmt::Debug for SelectionLockArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{}({:#x})", Self::NAME, self)
    }
}
impl<'r> ::core::fmt::Display for SelectionLockArgsReader<'r> {
    fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
        write!(f, "{} {{ ", Self::NAME)?;
        write!(f, "{}: {}", "reward_smt_type_id", self.reward_smt_type_id())?;
        write!(f, ", {}: {}", "issue_lock_hash", self.issue_lock_hash())?;
        write!(f, " }}")
    }
}
impl<'r> SelectionLockArgsReader<'r> {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZES: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn reward_smt_type_id(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[0..32])
    }
    pub fn issue_lock_hash(&self) -> Byte32Reader<'r> {
        Byte32Reader::new_unchecked(&self.as_slice()[32..64])
    }
}
impl<'r> molecule::prelude::Reader<'r> for SelectionLockArgsReader<'r> {
    type Entity = SelectionLockArgs;
    const NAME: &'static str = "SelectionLockArgsReader";
    fn to_entity(&self) -> Self::Entity {
        Self::Entity::new_unchecked(self.as_slice().to_owned().into())
    }
    fn new_unchecked(slice: &'r [u8]) -> Self {
        SelectionLockArgsReader(slice)
    }
    fn as_slice(&self) -> &'r [u8] {
        self.0
    }
    fn verify(slice: &[u8], _compatible: bool) -> molecule::error::VerificationResult<()> {
        use molecule::verification_error as ve;
        let slice_len = slice.len();
        if slice_len != Self::TOTAL_SIZE {
            return ve!(Self, TotalSizeNotMatch, Self::TOTAL_SIZE, slice_len);
        }
        Ok(())
    }
}
#[derive(Debug, Default)]
pub struct SelectionLockArgsBuilder {
    pub(crate) reward_smt_type_id: Byte32,
    pub(crate) issue_lock_hash: Byte32,
}
impl SelectionLockArgsBuilder {
    pub const TOTAL_SIZE: usize = 64;
    pub const FIELD_SIZES: [usize; 2] = [32, 32];
    pub const FIELD_COUNT: usize = 2;
    pub fn reward_smt_type_id(mut self, v: Byte32) -> Self {
        self.reward_smt_type_id = v;
        self
    }
    pub fn issue_lock_hash(mut self, v: Byte32) -> Self {
        self.issue_lock_hash = v;
        self
    }
}
impl molecule::prelude::Builder for SelectionLockArgsBuilder {
    type Entity = SelectionLockArgs;
    const NAME: &'static str = "SelectionLockArgsBuilder";
    fn expected_length(&self) -> usize {
        Self::TOTAL_SIZE
    }
    fn write<W: molecule::io::Write>(&self, writer: &mut W) -> molecule::io::Result<()> {
        writer.write_all(self.reward_smt_type_id.as_slice())?;
        writer.write_all(self.issue_lock_hash.as_slice())?;
        Ok(())
    }
    fn build(&self) -> Self::Entity {
        let mut inner = Vec::with_capacity(self.expected_length());
        self.write(&mut inner)
            .unwrap_or_else(|_| panic!("{} build should be ok", Self::NAME));
        SelectionLockArgs::new_unchecked(inner.into())
    }
}
