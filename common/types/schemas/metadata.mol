import basic;

table Validator {
    bls_pub_key:    Byte48,
    pub_key:        Byte65,
    address:        Identity,
    propose_weight: Uint32,
    vote_weight:    Uint32,
    propose_count:  Uint64,
}

vector MetadataList <Metadata>;
vector ValidatorList <Validator>;

table Metadata {
    epoch_len:       Uint32, // how many periods as one epoch
    period_len:      Uint32, // how many blocks as one period
    quorum:          Uint16,
    gas_limit:       Uint64,
    gas_price:       Uint64,
    interval:        Uint32,
    validators:      ValidatorList,
    propose_ratio:   Uint32,
    prevote_ratio:   Uint32,
    precommit_ratio: Uint32,
    brake_ratio:     Uint32,
    tx_num_limit:    Uint32,
    max_tx_size:     Uint32,
    block_height:    Uint64,  // no need?
}

table TypeIds {
    issue_type_id:           Byte32,  // issue(omni) cell type id
    selection_type_id:       Byte32,  // selection cell type id args
    xudt_owner_lock_hash:    Byte32,  // selection cell lock hash, also is xudt owner lock hash
    metadata_code_hash:      Byte32,
    metadata_type_id:        Byte32,  // metadata cell type script args
    checkpoint_code_hash:    Byte32,
    checkpoint_type_id:      Byte32,  // checkpoint cell type script args
    stake_smt_code_hash:     Byte32,
    stake_smt_type_id:       Byte32,  // stake smt cell type script args
    delegate_smt_code_hash:  Byte32,
    delegate_smt_type_id:    Byte32,  // delegate smt cell type script args
    reward_code_hash:        Byte32,
    reward_type_id:          Byte32,  // reward cell type script args
    xudt_type_hash:          Byte32,  // xudt cell type script hash
    stake_at_code_hash:      Byte32,  // 
    delegate_at_code_hash:   Byte32,  // 
    withdraw_code_hash:      Byte32,
}

table MetadataCellData {
    version:                byte,
    epoch:                  Uint64, // needless?
    propose_count_smt_root: Byte32,
    type_ids:               TypeIds,
    metadata:               MetadataList, // metadata of current and next epoch 
}

table MetadataArgs {
    metadata_type_id: Byte32,
}

table MetadataWitness {
    new_propose_proof: Bytes,
    smt_election_info: StakeSmtElectionInfo,
}

// election witness
table DelegateInfo {
    addr:   Identity, // delegator addr
    amount: Uint128,
}

vector DelegateInfos <DelegateInfo>;

table MinerGroupInfo {
    staker: Identity,
    amount: Uint128, 
    delegate_infos: DelegateInfos,      // calculate delegator_smt_root based on this
    delegate_epoch_proof: Bytes,        // prove delegator_smt_root's existence
}

vector MinerGroupInfos <MinerGroupInfo>;

table ElectionSmtProof {
    miners: MinerGroupInfos,   // calculate staker_smt_root based on this
    staker_epoch_proof: Bytes, // prove staker_smt_root's existence
}

table DelegateProof {
    staker: Identity,
    proof: Bytes,     // staker's all delegate info proof
}
vector DelegateProofs <DelegateProof>;

table StakeSmtElectionInfo {
    n2: ElectionSmtProof,
    new_stake_proof: Bytes,
    new_delegate_proofs: DelegateProofs,
}