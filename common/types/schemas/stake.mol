import basic;

struct StakeArgs {
    metadata_type_id: Byte32,
    stake_addr:       Identity,  // l2 eth addr
}

table StakeInfoDelta {
    is_increase:        byte, // increase or decrease stake, 1 is increase, 0 is decrease
    amount:             Uint128,
    inauguration_epoch: Uint64,
}

struct DelegateRequirementArgs {
    metadata_type_id:    Byte32,
    requirement_type_id: Byte32,
}

table DelegateRequirementInfo {
    code_hash: Byte32,
    requirement: DelegateRequirementArgs,
}

table StakeAtCellLockData {
    version:             byte,
    l1_pub_key:          Byte33,
    bls_pub_key:         Byte48,
    l1_address:          Identity,
    l2_address:          Identity,
    metadata_type_id:    Byte32,
    requirement_info:    DelegateRequirementInfo,   // staker's delegate requirement type id
    delta:               StakeInfoDelta,  
}

vector BytesVec <Bytes>;

// The data[0..16] is a le_u128 means xUDT amount.
// So the cell data is decode from offset 16.
table StakeAtCellData {
    lock: StakeAtCellLockData,
    data: BytesVec, // must be added!!! todo
}

table StakeAtWitness {
    mode:          byte, // 0 is update stake at cell itself, 1 is update stake smt cell
    eth_sig:       Byte65,
}

table StakeSmtCellData {
    version:          byte,
    smt_root:         Byte32, // smt root of all staker infos
    metadata_type_id: Byte32,
}

// stake smt cell witness
table StakeInfo {
    addr:   Identity,
    amount: Uint128,
}

vector StakeInfos <StakeInfo>;

table StakeSmtUpdateInfo {
    all_stake_infos:  StakeInfos, // all stake info
    // old_bottom_proof: BytesOpt,  // old amount proof, if none means the first time update
    old_epoch_proof:  Bytes,
    new_epoch_proof:  Bytes,
}

table StakeSmtWitness {
    mode:          byte, // 0 is update stake at cell itself, 1 is update stake smt cell
    update_info:   StakeSmtUpdateInfo,
}